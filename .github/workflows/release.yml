name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: write
      pull-requests: write
      id-token: write
      pages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install comfy-cli
        run: |
          python -m pip install --upgrade pip
          pip install comfy-cli

      - name: Setup Rust
        run: rustup target add wasm32-unknown-unknown

      - name: Setup Node.js and pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "pnpm"

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            wasm/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install dependencies
        run: pnpm install

      - name: Setup Playwright
        run: pnpm playwright install chromium --with-deps

      - name: Build WASM
        run: pnpm run build-wasm

      - name: Test Rust code
        run: cd wasm && cargo test

      - name: Build
        run: pnpm run build

      - name: Typecheck Frontend
        run: pnpm run check

      - name: Lint Frontend
        run: pnpm run lint

      - name: Test Frontend
        run: pnpm run test

      - name: Build Extensions
        run: pnpm run build-extensions-comfyui

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          title: "Release: Version Packages"
          commit: "Release: Version Packages"
          publish: pnpm changeset tag
          version: pnpm changeset version && pnpm sync-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./build"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Create ComfyUI release package (on release)
        if: steps.changesets.outputs.published == 'true'
        run: |
          LATEST_VERSION=$(echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -r '.[0].version // "latest"')
          cd dist-extensions/comfy-ui
          zip -r ../../cps-comfyui-v${LATEST_VERSION}.zip .
          cd ../..
          gh release upload v${LATEST_VERSION} cps-comfyui-v${LATEST_VERSION}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to ComfyUI Registry (on release)
        if: steps.changesets.outputs.published == 'true'
        run: |
          cd dist-extensions/comfy-ui
          comfy --skip-prompt --no-enable-telemetry env
          comfy node publish --token ${{ env.TOKEN }}
        env:
          TOKEN: ${{ secrets.COMFYUI_REGISTRY_ACCESS_TOKEN }}
